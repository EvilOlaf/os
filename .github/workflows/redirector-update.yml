name: Redirector update (cronjob)
on:
  repository_dispatch:
    types: ["Redirector update"]
#  schedule:
#    - cron: "00 3 * * *"
  workflow_dispatch:

jobs:

  Check:

    name: "Check membership"
    runs-on: Linux
    steps:

      - name: "Check membership"
        uses: armbian/actions/team-check@main
        with:
          ORG_MEMBERS: ${{ secrets.ORG_MEMBERS }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Test-debs:
    name: "Check debs mirrors"
    needs: Check
    outputs:
      matrix: ${{steps.json.outputs.JSON_CONTENT}}
    runs-on: Linux
    steps:

      - name: Get primary mirrors from database
        id: json
        run: |

          echo 'JSON_CONTENT<<EOF' >> $GITHUB_OUTPUT
          curl -H "Authorization: Token ${{ secrets.NETBOX_TOKEN }}" -H "Accept: application/json; indent=4" \
          "https://stuff.armbian.com/netbox/api/virtualization/virtual-machines/?limit=500&name__empty=false&tag=debs" \
          | jq '.results[] | .name,.custom_fields["download_path_debs"],.id' | sed "s|null|apt|" | sed "s/\"//g" \
          | xargs -n3 -d'\n' | sed -e 's/\s\+/\//' | sed "s/ /,/" | jq -cnR '[inputs | select(length>0)]' | jq >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
 
  Ping-debs:
    name: "Check debs"
    runs-on: Linux
    needs: Test-debs
    outputs:
      matrix: ${{needs.Test-debs.outputs.matrix}}
    if: ${{ needs.Test-debs.outputs.matrix != '[]' && needs.Test-debs.outputs.matrix != '' }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:

        node: ${{fromJson(needs.Test-debs.outputs.matrix)}}

    steps:

      - name: "Check"
        run: |

          SERVER_URL=$(echo "${{ matrix.node }}" | cut -d"," -f1)
          SERVER_ID=$(echo "${{ matrix.node }}" | cut -d"," -f2)
          ORIGIN=$(timeout 30 curl --retry 5 -s https://imola.armbian.com/apt/control || true)
          CHECK=$(timeout 30 curl --retry 5 -s https://${SERVER_URL}/control || true)
          if [[ "$ORIGIN" == "$CHECK" ]]; then
            rm -rf downloads
            mkdir -p downloads
            echo $SERVER_URL > downloads/$SERVER_ID
          fi

      - name: Upload JSON
        uses: actions/upload-artifact@v3
        with:
          name: assets-for-download
          path: downloads
          if-no-files-found: ignore

  closing:
    name: "Footer"
    runs-on: Linux
    needs: Ping-debs
    steps:

      - name: "Download artifacts"
        uses: actions/download-artifact@v3
        with:
          name: assets-for-download
          path: downloads

      - name: "Check"
        run: |

          cat downloads/* | sed ':a; N; s/\n/ /; ta'

      - uses: geekyeggo/delete-artifact@v2
        with:
          name: assets-for-download
          failOnError: false
